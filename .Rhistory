Sys.which("pdflatex")
Sys.getenv(“PATH”)
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/Library/TeX/texbin",sep=":"))
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.which("pdflatex")
ls /usr/local/texlive/2018
ls /thecoolestman/local/texlive/2018
Sys.which("pdflatex")
Sys.getenv(c("PATH", "TEX"))
Sys.setenv(PATH=paste(Sys.getenv("TEX"),"/usr/texbin",sep=":"))
Sys.getenv(c("PATH", "TEX"))
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
Sys.getenv(c("PATH", "TEX"))
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/Library/TeX/texbin",sep=":"))
Sys.getenv(c("PATH", "TEX"))
Sys.setenv(TEX=paste(Sys.getenv("PATH"),"/Library/TeX/texbin",sep=":"))
Sys.getenv(c("PATH", "TEX"))
Sys.getenv(“PATH”)
Sys.getenv("PATH)
Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.getenv("R_TEXI2DVICMD")
help("texi2dvi", package = "tools")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
Sys.which("pdflatex")
getOption("texi2dvi")
system("R CMD Rd2pdf .")
Sys.which("pdflatex")
Sys.getenv("PATH")
help("Sys.setenv")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/Library/TeX/texbin/",sep=":"))
help("Sys.setenv")
Sys.getenv("PATH")
Sys.getenv(c("PATH", "TEX"))
Sys.setenv(PATH=":/usr/texbin:/usr/texbin:/Library/TeX/texbin:/Library/TeX/texbin")
Sys.getenv(c("PATH", "TEX"))
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.setenv(PATH="/usr/local/texlive/2018/bin/x86_64-darwin")
Sys.getenv(c("PATH", "TEX"))
devtools::document()
devtools::document()
devtools::document()
devtools::check_man()
devtools::check()
devtools::load_all()
devtools::check()
wd
getwd
getwd()
devtools::check()
devtools::check()
devtools:check()
devtools::check()
devtools::use_vignette("my-vignette")
devtools::build()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Bootstrap discount factors from a yield curve
buildCurve <- function(swapRates, tenors, fixFreq, fixDCC,
fltFreq, fltDCC, calendar, bdc,
curveDate, numSetDay, yieldCurveDCC)
rate <- c(0.69, 0.77, 0.88, 1.01, 1.14, 1.38, 1.66, 2.15)*0.01
tenor <- c(1, 2, 3, 4, 5, 7, 10, 30)
fixFreq <- 6
fixDCC <- "Thirty360"
fltFreq <- 6
fltDCC <- "ACT360"
calendar <- "NY"
bdc <- "Modified_Foll"
curveDate <- "2016-02-08"
numSetDay <- 2
yieldCurveDCC <- "Thirty360"
buildCurve(rate, tenor, fixFreq, fixDCC, fltFreq, fltDCC, calendar, bdc,
curveDate, numSetDay, yieldCurveDCC)
# Bootstrap discount factors from a yield curve
buildCurve <- function(swapRates, tenors, fixFreq, fixDCC,
fltFreq, fltDCC, calendar, bdc,
curveDate, numSetDay, yieldCurveDCC)
rate <- c(0.69, 0.77, 0.88, 1.01, 1.14, 1.38, 1.66, 2.15)*0.01
tenor <- c(1, 2, 3, 4, 5, 7, 10, 30)
fixFreq <- 6
fixDCC <- "Thirty360"
fltFreq <- 6
fltDCC <- "ACT360"
calendar <- "NY"
bdc <- "Modified_Foll"
curveDate <- "2016-02-08"
numSetDay <- 2
yieldCurveDCC <- "Thirty360"
buildCurve(rate, tenor, fixFreq, fixDCC, fltFreq, fltDCC, calendar, bdc,
curveDate, numSetDay, yieldCurveDCC)
browseVignettes("ggplot2")
browseVignettes("knitr")
browseVignettes("knitr")
devtools::build()
browseVignettes("stat")
devtools::build()
browseVignettes("vamc")
devtools::build()
browseVignettes("/Users/thecoolestman/vamc_0.0.0.9000.tar.gz")
devtools::build_vignettes()
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::use_readme_rmd()
devtools::use_readme_rmd()
devtools::build_vignettes()
devtools::build_win()
devtools::check()
devtools::check()
devtools::revdep_check()
devtools::check(check_version = TRUE)
devtools::check(check_version = TRUE)
devtools::build()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
read.csv("/Downloads/IBM.csv")
IBM <- read_csv("~/Downloads/IBM.csv")
library(readr)
IBM <- read_csv("~/Downloads/IBM.csv")
IBM
IBM <- read_csv("~/Downloads/IBM.csv")[, 'Close']
IBM
IBM <- read.csv("~/Downloads/IBM.csv")[, 'Close']
IBM
IBM <- read.csv("~/Downloads/IBM.csv")[, 'Close']
IBM
length(IBM)
IBM <- read.csv("~/Downloads/IBM.csv")
IBM
IBM <- read.csv("~/Downloads/IBM.csv")
# calculate historical return for the 500 observations
return <- ave(IBM$Close, IBM$Date, FUN = function(x) c(0, diff(x)))
return
IBM$Close
IBM$Date
IBM <- read.csv("~/Downloads/IBM.csv")[, 'Close']
# calculate historical return for the 500 observations
return <- diff(IBM)
return
# clean the historical data for IBM from 2016-09-25 to 2018-09-20
IBM <- read.csv("~/Downloads/IBM.csv")[, 'Close']
# calculate historical log returns for ten days' returns with a moving window
# 250 observations
return <- diff(log(IBM))
return
length(IB<)
length(IBM)
111/10
tenDayReturn <- rep(0, floor(length(IBM) / 10))
for (i in 1:length(tenDayReturn)) {
tenDayReturn[i] <- ln(IBM[1 + 10 * i] / IBM[1 + 10 * (i - 1)])
}
tenDayReturn <- rep(0, floor(length(IBM) / 10))
for (i in 1:length(tenDayReturn)) {
tenDayReturn[i] <- log(IBM[1 + 10 * i] / IBM[1 + 10 * (i - 1)])
}
tenDayReturn
quantile(tenDayReturn)
min(tenDayReturn)
tenDayReturn <- sort(tenDayReturn)
# 99% VaR lies between the second and third largest loss
r_2 <- tenDayReturn[2]
r_3 <- tenDayReturn[3]
# perform linear interpolation
x <- 2:3
y <- c(r_2, r_3)
VaR <- approx(x, y, 2.51, method="linear")
VaR
0.975*251
0.225*251
0.025*251
ES <- mean(tenDayReturn[1:6])
ES
VaR
tenDayReturn <- rep(0, floor(length(IBM) / 10))
for (i in 1:length(tenDayReturn)) {
tenDayReturn[i] <- (IBM[1 + 10 * i] - IBM[1 + 10 * (i - 1)])
}
# sort the data and perform linear interpolation to obtain 99% VaR
tenDayReturn <- sort(tenDayReturn)
# 99% VaR lies between the second and third largest loss
r_2 <- tenDayReturn[2]
r_3 <- tenDayReturn[3]
# perform linear interpolation
x <- 2:3
y <- c(r_2, r_3)
VaR <- approx(x, y, 2.51, method="linear")
# 97.5% ES by averaging over losses exceeding 97.5% VaR, i.e. top 6 losses
ES <- mean(tenDayReturn[1:6])
# Now we try to find q* that gives
VaR
ES
0.025*251
0.024*251
0.026*251
devtools::check()
devtools::check()
devtools::load_all()
fundScen[1, , ]
# Again, we show the fund simulated path for five months of the first scenario
fundScen <- genFundScen(fundMap, indexScen)
fundScen[1, 1:5, ]
# In this vignette, we will arbitrarily use the first two scenarios from fundSen to valuate a portfolio of two guarantees to speed up the execution of the example.
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen[1:2, , ], 1 / 12, cForwardCurve)
# In this vignette, we will arbitrarily use the first two scenarios from fundSen to valuate a portfolio of two guarantees to speed up the execution of the example.
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen[1, , ], 1 / 12, cForwardCurve)
# Again, we show the fund simulated path for five months of the first scenario
fundScen <- genFundScen(fundMap, indexScen)
fundScen[1, , ]
# In this vignette, we will arbitrarily use the first two scenarios from fundSen to valuate a portfolio of two guarantees to speed up the execution of the example.
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen[1, , ], 1 / 12, cForwardCurve)
# Again, we show the fund simulated path for five months of the first scenario
fundScen <- genFundScen(fundMap, indexScen)
fundScen[1, 1:5, ]
for (i in 1:1){i = i + 1}
dim(indexScen)
dim(indexScen[1, , ])
devtools::check()
devtools::test()
fundScen <- genFundScen(fundMap, indexScen)[1, , ]
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen, 1 / 12, cForwardCurve)
devtools::build()
devtools::check()
dim(indexScen)
length(dim(indexScen))
fundScen <- genFundScen(fundMap, indexScen)[1, , ]
dim(fundMap)
dim(fundScen)
fundScen <- genFundScen(fundMap, indexScen)[1:2, , ]
dim(fundScen)
devtools::build()
devtools::load_all()
devtools::build()
valuateOnePolicy <- function(inPolicy, mortTable, fundScen, dT, df){
if (inPolicy[1, "matDate"] <= inPolicy[1, "currentDate"]) {
return(policyValue = 0)
}
# If the policy is inforce, select the risk project function to calculate
# the death benefits, living benefits, and risk charges for each period
Type <- inPolicy[1, "productType"]
# projectFun is projectXXXX where XXXX is the product type of the policy
projectFun <- get(paste0("project", Type))
# In valuation, project from current date to maturity date
startDate <- as.POSIXlt(inPolicy[1, "currentDate"])
endDate <- as.POSIXlt(inPolicy[1, "matDate"])
numStep <- 12 * (endDate$year - startDate$year) +
(endDate$mon - startDate$mon)
scenDim <- dim(fundScen)
# Check if only one scenario is provided
if (length(scenDim) == 2){
numScen <- 1
} else {
numScen <- scenDim[1]
}
print(numScen)
# Calculate actuarial discount factors
mortFactors <- calcMortFactors(inPolicy, mortTable, dT)
pq <- matrix(mortFactors[, "pq"], nrow = 1)  # enforced row vector
p <- matrix(mortFactors[, "p"], nrow = 1)  # enforced row vector
# Placeholders for results
DA <- c()
LA <- c()
RC <- c()
# this for loop is parallelizable
for (scen in 1:numScen) {
# curScen is numStep-by-numFund
curScen <- matrix(fundScen[scen, 1:numStep, ], nrow = numStep)
VABenefits <- projectFun(inPolicy, curScen, dT, pq, p, df)
DA[scen] <- VABenefits$DA
LA[scen] <- VABenefits$LA
RC[scen] <- VABenefits$RC
}
# Calculate discounted payoffs for all scenarios (1-by-numScen vectors)
DAs <- sum(DA)
LAs <- sum(LA)
RCs <- sum(RC)
return(list(policyValue = (DAs + LAs) / numScen,
riskCharge = RCs / numScen))
}
fundScen <- genFundScen(fundMap, indexScen)[1, , ]
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen, 1 / 12, cForwardCurve)
devtools::load_all()
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen, 1 / 12, cForwardCurve)
devtools::load_all()
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen, 1 / 12, cForwardCurve)
devtools::check()
# Again, we show the fund simulated path for five months of the first scenario
fundScen <- genFundScen(fundMap, indexScen)
fundScen[1, 1:5, ]
# In this vignette, we will arbitrarily use the first two scenarios from fundSen to valuate a portfolio of two guarantees to speed up the execution of the example.
valuatePortfolio(VAPort[1:2, ], mortTable, fundScen[1, , ], 1 / 12, cForwardCurve)
devtools::build()
devtools::check(version=TRUE)
devtools::check(check_version = TRUE)
devtools::build_win()
devtools::build()
devtools::build()
# Default randomly generated covariance matrix
knitr::kable(mCov, col.names = c("Covariance Matrix"))
mCov
indexNames
# Default randomly generated covariance matrix
knitr::kable(mCov, col.names = indexNames, row.names = indexNames)
length(indexNames)
# Default randomly generated covariance matrix
knitr::kable(mCov, col.names = indexNames)
# Default index names
knitr::kable(indexNames)
# Default index names
knitr::kable(indexNames, col.names = c("Index Names"))
devtools::build()
devtools::build()
devtools::build_win()
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::document()
devtools::use_package()
devtools::use_package(vamc)
devtools::use_package('vamc')
devtools::use_package('Rdpack')
devtools::install_deps(dependencies = TRUE)
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::build()
devtools::build()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build()
devtools::build_vignettes()
devtools::build()
devtools::build()
devtools::build_vignettes()
devtools::build()
devtools::check()
devtools::build()
devtools::build()
devtools::build()
help(vamc)
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
install.packages("lintr")
lintr::lint_package()
devtools::build()
genPortInception(prodPct = c(0.9, 0.1), rollUpRate = c(0, 0, 0),
riderFee = c(0, 0), withdrawalRate(0, 0)
)
devtools::build()
gsub("[\r\n]", "", "Please input prodType, rollUpRate, riderFee,
and withdrawalRate in the same length")
gsub("[\r\n]", "", "Please input prodType, rollUpRate, riderFee,
and withdrawalRate in the same length")
msg <- gsub("[\r\n]", "", "Please input prodType, rollUpRate, riderFee,
and withdrawalRate in the same length")
gsub("[\r\n]", "", "Please input prodType, rollUpRate, riderFee,
and withdrawalRate in the same length")
devtools::build()
lintr::lint_package()
lintr::lint_package()
devtools::build()
lintr::lint_package()
lintr::lint_package()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
devtools::build()
devtools::build()
devtools::build()
devtools::build()
indexScenx
indexScen
indexScen <- indexScen[1:10, , ]
indexScen
devtools::use_data(indexScen, overwrite = TRUE)
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build_win()
devtools::test()
devtools::test()
devtools::build()
devtools::build()
file.exists("~/.ssh/id_rsa.pub")
devtools::use_travis()
devtools::build()
devtools::build()
devtools::build()
devtools::build_win()
devtools::build_win()
devtools::build()
devtools::build()
devtools::build()
devtools::build_win()
VAPort
load("~/vamc/data/VAPort.rda")
VAPort[1, ]
VAPoq
VAPort
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build_vignettes()
devtools::build()
devtools::build_win()
devtools::build()
devtools::build()
devtools::build()
lintr::lint_package()
devtools::load_all()
lintr::lint_package()
devtools::release()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
file.exists("~/.ssh/id_rsa.pub")
